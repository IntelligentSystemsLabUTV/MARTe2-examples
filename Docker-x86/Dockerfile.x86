FROM ubuntu:20.04
LABEL maintainer="Alessandro Tenaglia <alessandro.tenaglia@uniroma2.it>"

# Remove interaction while installing or upgrading the system via apt
ENV DEBIAN_FRONTEND=noninteractive

#+----------------+
#|    Language    |
#+----------------+
# Install language and locales
ENV LANG=en_US.UTF-8
RUN apt-get update && apt-get install -y \
    locales && \
    locale-gen en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

#+----------------+
#|    Timezone    |
#+----------------+
# Set up UTC timezone
ENV TZ=Europe/Rome
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone && \
    apt-get update && apt-get install -y tzdata && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

#+-------------+
#|    Utils    |
#+-------------+
# Install basic utilities
RUN apt-get update && apt-get install -y \
    apt-utils \
    bison \
    build-essential \
    curl \
    dialog \
    dpkg-dev \
    fakeroot \
    flex \
    gedit \
    gperf \
    iproute2 \
    nano \
    rsync \
    screen \
    sudo \
    openssh-server \
    wget && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

#+---------------+
#|    Develop    |
#+---------------+
# Install development tools
RUN apt-get update && apt-get install -y \
    automake \
    cmake \
    gdb \
    gfortran \
    git-man \
    manpages-dev \
    octave \
    python3 \
    python3-pip && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

#+--------------+
#|    Extras    |
#+--------------+
# Install extra libreries
RUN apt-get update && apt-get install -y \
    libmotif-dev \
    libncurses-dev \
    libreadline-dev \
    libxml2 \
    libxml2-dev \
    libxtst6 \
    libcurl4-openssl-dev && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*

#+-----------+
#|    Git    |
#+-----------+
# Add repo deb-src
ENV GIT_VERSION=2.25.1
ENV PLATFORM=1ubuntu3.2
ENV GIT=$GIT_VERSION-$PLATFORM
RUN sed -i "s/# deb-src/deb-src/g" /etc/apt/sources.list && \
    apt-get update && \
    mkdir /tmp/git-openssl && \
    cd /tmp/git-openssl && \
    apt-get source git=1:$GIT && \
    chown -R _apt:root git_$GIT.dsc && \
    apt-get build-dep -y git && \
    cd git-$GIT_VERSION && \
    sed -i -- 's/libcurl4-gnutls-dev/libcurl4-openssl-dev/' debian/control && \
    sed -i -- '/TEST\s*=\s*test/d' debian/rules && \
    apt-get update && apt-get install -y \
    libcurl4-openssl-dev && \
    dpkg-buildpackage -rfakeroot -b && \
    dpkg -i ../git_${GIT}_armhf.deb && \
    rm -rf /tmp/git-openssl /var/lib/apt/lists/*

#+------------+
#|    Java    |
#+------------+
# Install Java
RUN apt-get update && apt-get install -y \
    default-jre \
    default-jdk && \
    apt-get autoclean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/*
# Set JAVA_HOME
RUN echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> /etc/environment && \
    . /etc/environment

#+------------+
#|    User    |
#+------------+
ARG USERNAME=marte2
ARG USER_UID=1000
ARG USER_GID=$USER_UID
# Create a non-root sudo user
RUN groupadd --gid $USER_GID $USERNAME && \
    useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME && \
    echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME && \
    chmod 0440 /etc/sudoers.d/$USERNAME
# Switch to internal user
USER $USERNAME
ENV HOME=/home/$USERNAME
WORKDIR $HOME

#+------------------+
#|    Miniconda3    |
#+------------------+
# Install Miniconda 3
RUN wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh && \
    /bin/bash $HOME/miniconda.sh -b -p $HOME/miniconda3
ENV PATH=$PATH:$HOME/miniconda3/bin
# Setup conda
RUN chown -R $USER_UID:$USER_GID $HOME/miniconda3/ && \ 
    conda config --set always_yes true && \
    conda config --add channels rpi && \
    conda install -y python=3.6
# Create a new environment and install packages
RUN conda create --name myenv python=3.6 && \
    conda install --name myenv numpy

#+---------------+
#|    MDSplus    |
#+---------------+
# Install MDSplus
ENV MDSPLUS_DIR=$HOME/mdsplus
RUN git clone https://github.com/MDSplus/mdsplus $HOME/mdsplus-alpha && \
    cd mdsplus-alpha && \
    ./bootstrap && \
    mkdir build && \
    cd build && \
    ../configure --prefix=$MDSPLUS_DIR && \
    make && \
    make install && \
    rm -rf $HOME/mdsplus-alpha
ENV PATH=$PATH:$MDSPLUS_DIR/bin
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$MDSPLUS_DIR/lib
ENV MDS_PATH=$MDSPLUS_DIR/tdi
ENV CLASSPATH=$MDSPLUS_DIR/java/classes/jScope.jar:$MDSPLUS_DIR/java/classes/jTraverser.jar:$MDSPLUS_DIR/java/classes/jDevices.jar:$MDSPLUS_DIR/java/classes/mdsobjects.jar:$MDSPLUS_DIR/java/classes/jDispatcher.jar
# Install MDSplus into myenv
RUN . activate myenv && \
    cd $MDSPLUS_DIR/python/MDSplus && \
    python setup.py install && \
    cd $HOME/miniconda3/envs/myenv/lib/python3.6/site-packages/ && \
    cp -r $MDSPLUS_DIR/python/MDSplus . && \
    mv MDSplus/MDSplus.egg-info . && \
    . deactivate

#+-------------+
#|    OPCUA    |
#+-------------+
# Install OPCUA
ENV OPEN62541_DIR=$HOME/open62541
ENV OPEN62541_LIB=$OPEN62541_DIR/build/bin
ENV OPEN62541_INCLUDE=$OPEN62541_DIR/build
RUN git clone -b 1.1 https://github.com/open62541/open62541.git $OPEN62541_DIR && \
    mkdir $OPEN62541_DIR/build && \
    cd $OPEN62541_DIR/build && \
    cmake -DUA_ENABLE_AMALGAMATION:BOOL=ON .. && \
    make

#+-----------+
#|    SDN    |
#+-----------+
# Install SDN
ENV SDN_CORE_DIR=$HOME/SDN_1.0.12_nonCCS
ENV SDN_CORE_INCLUDE_DIR=$SDN_CORE_DIR/src/main/c++/include/
ENV SDN_CORE_LIBRARY_DIR=$SDN_CORE_DIR/target/lib/
RUN wget https://vcis-gitlab.f4e.europa.eu/aneto/MARTe2-demos-padova/raw/develop/Other/SDN_1.0.12_nonCCS.tar.gz -O $HOME/SDN_1.0.12_nonCCS.tar.gz && \
    tar -zxvf $HOME/SDN_1.0.12_nonCCS.tar.gz -C $SDN_CORE_DIR && \
    cd $SDN_CORE_DIR && \
    make && \
    rm -rf $HOME/SDN_1.0.12_nonCCS.tar.gz

#+--------------+
#|    MARTe2    |
#+--------------+
# Clone MARTe2 Core repository and change branch
ENV TARGET=armv8-linux
ENV MARTe2_DIR=$HOME/MARTe2
RUN git clone https://vcis-gitlab.f4e.europa.eu/aneto/MARTe2 $MARTe2_DIR && \
    cd $MARTe2_DIR && \
    git checkout develop-armv8-linux
# Change MakeDefaults
RUN sed -i "s/-Werror -Wno-invalid-offsetof/-Wno-error -Wno-invalid-offsetof -fpermissive/g" $MARTe2_DIR/MakeDefaults/MakeStdLibDefs.armv8-linux
RUN sed -i "s/-lrt/-lrt -lncurses/g" $MARTe2_DIR/MakeDefaults/MakeStdLibDefs.armv8-linux
# Remove tests
RUN sed -i "s/gtest core test/core/g" $MARTe2_DIR/Makefile.inc
# Build MARTe2 Core
RUN make -f $MARTe2_DIR/Makefile.armv8-linux

#+-----------------------+
#|    MARTe2 Examples    |
#+-----------------------+
# Clone MARTe2 Examples repository
ENV MARTe2_Examples_DIR=$HOME/MARTe2-examples
RUN git clone https://github.com/IntelligentSystemsLabUTV/MARTe2-examples $MARTe2_Examples_DIR
# Untar MATLAB includes
ENV MATLAB_DIR=$HOME/MATLAB
RUN tar -xzf $MARTe2_Examples_DIR/MATLAB/Include.tar.gz -C $MATLAB_DIR/

#+-------------------------+
#|    MARTe2 Components    |
#+-------------------------+
# Clone MARTe2 Components repository
ENV MARTe2_Components_DIR=$HOME/MARTe2-components
RUN git clone https://vcis-gitlab.f4e.europa.eu/aneto/MARTe2-components $MARTe2_Components_DIR
# Remove tests
RUN sed -i "s/core test/core/g" $MARTe2_Components_DIR/Makefile.inc
# Build MARTe2 Components
RUN make -f $MARTe2_Components_DIR/Makefile.inc

# Activate interaction with apt
ENV DEBIAN_FRONTEND=dialog
WORKDIR $HOME
