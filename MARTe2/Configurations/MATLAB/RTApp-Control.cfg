// Real-Time Application: Control System
//
// Alessandro Tenaglia <alessandro.tenaglia42@gmail.com>
//
// May 22, 2022

// Command to execute the RT App:
// sudo ./MARTeApp.sh -l RealTimeLoader -f Configurations/Logger/RTApp-Control.cfg -m StateMachine:START

// Interfaces
+TCPMessageProxy = {
    Class = TCPSocketMessageProxy
    Port = 8000
}

// State Machine
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = RUN
            NextStateError = ERROR
            Timeout = 0
            +OpenTreeMsg = {
                Class = Message
                Destination = RTApp.Data.MDSWriter
                Function = OpenTree
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +PrepareChangeToRunMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +FlushTreeMsg = {
                Class = Message
                Destination = RTApp.Data.MDSWriter
                Function = FlushSegments
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }

        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}

// RT App
$RTApp = {
    Class = RealTimeApplication
    // GAMs
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    DataSource = Timer
                    Type = uint32
                    Frequency = 10
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMRef = {
            Class = ConstantGAM
            OutputSignals = {
                r = {
                    DataSource = DDB1
                    Type = float64
                    Default = 1
                }
            }
        }
        +GAMSum = {
            Class = MathExpressionGAM
            Expression = "e = r - y;"
            InputSignals = {
                r = {
                    DataSource = DDB1
                    Type = float64
                }
                y = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                e = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
	    +GAMPID = {
	        Class = SimulinkWrapperGAM
	        Library = PID.so
	        SymbolPrefix = PID
            InputSignals = {
                e = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                u = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            Parameters = {
                Kp = (float64) 0.4
                Ki = (float64) 0.0
                Kd = (float64) 0.0
                dt = (float64) 0.1
            }
	    }
	    +GAMPlant = {
	        Class = SimulinkWrapperGAM
	        Library = Plant.so
	        SymbolPrefix = Plant
            InputSignals = {
                u = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                y = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            Parameters = {
                A = (float64) {{0.9952, 0.095},{-0.095, 0.9002}}
                B = (float64) {{0.004833},{0.095}}
                C = (float64) {{1, 0}}
                D = (float64) 0.0
                dt = (float64) 0.1
            }
	    }
        +GAMWriter = {
            Class = IOGAM
            InputSignals = {
                r = {
                    DataSource = DDB1
                    Type = float64
                }
                e = {
                    DataSource = DDB1
                    Type = float64
                }
                u = {
                    DataSource = DDB1
                    Type = float64
                }
                y = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                r = {
                    DataSource = MDSWriter
                    Type = float64
                }
                e = {
                    DataSource = MDSWriter
                    Type = float64
                }
                u = {
                    DataSource = MDSWriter
                    Type = float64
                }
                y = {
                    DataSource = MDSWriter
                    Type = float64
                }
            }
        }
        +GAMLogger = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                e = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = Logger
                    Type = uint32
                }
                e = {
                    DataSource = Logger
                    Type = float64
                }
            }
        }
    }
    // Data Sources
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +Logger = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = Default
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +MDSWriter = {
            Class = MDSWriter
            NumberOfBuffers = 10000
            CPUMask = 0x1
            StackSize = 10000000
            TreeName = "control"
            StoreOnTrigger = 0
            EventName = "updatejScope"
            TimeRefresh = 100
            Signals = {
                r = {
                    NodeName = REFERENCE
                    Type = float64
                    Period = 1
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100
                }
                e = {
                    NodeName = ERROR
                    Type = float64
                    Period = 1
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100
                }
                u = {
                    NodeName = INPUT
                    Type = float64
                    Period = 1
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100
                }
                y = {
                    NodeName = OUTPUT
                    Type = float64
                    Period = 1
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 100
                }
            }
        }
    }
    // RT States
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer GAMRef GAMSum GAMPID GAMPlant GAMWriter GAMLogger}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
    }
    // Scheduler
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
