/* Interfaces */
+TCPMessageProxy = {
    Class = TCPSocketMessageProxy
    Port = 8000
}

/* FSM */
+StateMachine = {
    Class = StateMachine

    /* FSM State: INITIAL */
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }

    /* FSM State: IDLE */
    +IDLE = {
        Class = ReferenceContainer
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = "RUN"
            NextStateError = "ERROR"
            Timeout = 0
            +OpenTreeMsg = {
                Class = Message
                Destination = TestApp.Data.MDSWriter
                Function = OpenTree
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
            +PrepareChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }

    /* FSM State: RUN */
    +RUN = {
        Class = ReferenceContainer
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +FlushTreeMsg = {
                Class = Message
                Destination = TestApp.Data.MDSWriter
                Function = FlushSegments
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
        }
    }

    /* FSM State: ERROR */
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}

$TestApp = {
    Class = RealTimeApplication

    /* GAMs */
    +Functions = {
        Class = ReferenceContainer

        /* Timer */
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }

        /* Logger */
        +GAMLogger = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTime = {
                    Alias = Run.Thread1_CycleTime
                    DataSource = Timings
                    Type = uint32
                }
            } 
            OutputSignals = {
                Counter = {
                    DataSource = Logger
                    Type = uint32
                }
                Time = {
                    DataSource = Logger
                    Type = uint32
                }
                CycleTime = {
                    DataSource = Logger
                    Type = uint32
                }
            }
        }

        /* MDS Writer */
        +GAMWriter = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTime = {
                    Alias = Run.Thread1_CycleTime
                    DataSource = Timings
                    Type = uint32
                }
            } 
            OutputSignals = {
                Counter = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                Time = {
                    DataSource = MDSWriter
                    Type = uint32
                }
                CycleTime = {
                    DataSource = MDSWriter
                    Type = uint32
                }
            }
        }
    }

    /* Datasources */
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1

        +DDB1 = {
            Class = GAMDataSource
        }        

        +Logger = {
            Class = LoggerDataSource
        }

        +Timings = {
            Class = TimingDataSource
        }

        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }

        +MDSWriter = {
            Class = MDSWriter
            NumberOfBuffers = 10000
            CPUMask = 0x1
            StackSize = 10000000
            TreeName = "wrrd"
            StoreOnTrigger = 0
            EventName = "updatejScope"
            TimeRefresh = 100
            Signals = {
                Counter = {
                    Type = uint32
                    NodeName = "COUNTER"
                    Period = 0.001
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 10000
                }
                Time = {
                    Type = uint32
                    NodeName = "TIME"
                    Period = 0.001
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 10000
                }
                CycleTime = {
                    Type = uint32
                    NodeName = "CYCLETIME"
                    Period = 0.001
                    AutomaticSegmentation = 0
                    MakeSegmentAfterNWrites = 10000
                }
            }
	    }   
    }

    /* RTApp States */
    +States = {
        Class = ReferenceContainer

        /* State: Idle */
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }

        /* State: Run */
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer GAMWriter GAMLogger}
                }
            }
        }

        /* State: Error */
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
    }

    /* Scheduler */
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
