/**
 * @file RTApp-OPCUA-Main.cfg
 * @author Alessandro Tenaglia
 * @date 6 February, 2022
 * @brief Configuration file for a MARTe app
 */

+OPCUATypes = {
	Class = ReferenceContainer
	+Sys = {
		Class = IntrospectionStructure
		Cmd = {
			Type = uint32
			NumberOfElements = 1
		}
		Status = {
			Type = uint32
			NumberOfElements = 1
		}
		
	}
	+Systems = {
		Class = IntrospectionStructure
        Main = {
            Type = Sys
            NumberOfElements = 1
        }
        Pub = {
            Type = Sys
            NumberOfElements = 1
        }
        SubLog = {
            Type = Sys
            NumberOfElements = 1
        }
	}
}

+OPCUAServer = {
	Class = OPCUA::OPCUAServer
	Port = 4840
	CPUMask = 0x2
	AddressSpace = {
		Systems = {
			Type = Systems
		}
	}
}

+OPCUAClient = {
    Class = OPCUAClient::OPCUAClient
    StackSize = 1048576
    CPUs = 0x4
    AutoStart = 1
    Address = "opc.tcp://localhost:4840"
    +PVMainStatus = {
        Class = OPCUAInterface::OPCUAVariable
        Path = Systems.Main.Status
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
    }
    +PVMainCmd = {
        Class = OPCUAClient::OPCUAVariable
        Path = Systems.Main.Cmd
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = { { "0" "GOTOIDLE" } { "1" "GOTORUN" } {"2" "RESET"} }
        }
    }
    +PVPubCmd = {
        Class = OPCUAInterface::OPCUAVariable
        Path = Systems.Pub.Cmd
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
    }
    +PVSubCmd = {
        Class = OPCUAInterface::OPCUAVariable
        Path = Systems.SubLog.Cmd
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
    }
}

/* State Machine */
+StateMachine = {
    Class = StateMachine
    /* INITIAL */
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    /* IDLE */
    +IDLE = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = OPCUAClient.PVMainStatus
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = RUN
            NextStateError = ERROR
            Timeout = 0
            +StartPub = {
                Class = Message
                Destination = OPCUAClient.PVPubCmd
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
            +StartSubLog = {
                Class = Message
                Destination = OPCUAClient.PVSubLogCmd
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
            +PrepareChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    /* RUN */
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
		    +SetStatusPV = {
                Class = Message
                Destination = OPCUAClient.PVMainStatus
                Function = OPCUAWrite
                Mode = ExpectsReply
                TimeOut = 0
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
		    }
        } 
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +StopPub = {
                Class = Message
                Destination = OPCUAClient.PVPubCmd
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
            +StopSubLog = {
                Class = Message
                Destination = OPCUAClient.PVSubLogCmd
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    /* ERROR */
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = OPCUAClient.PVMainStatus
                Function = OPCUAWrite
                Mode = ExpectsReply
                TimeOut = 0
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 2
                }
		    }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +ResetPub = {
                Class = Message
                Destination = OPCUAClient.PVPubCmd
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
            +ResetSubLog = {
                Class = Message
                Destination = OPCUAClient.PVSubLogCmd
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}

/* Real-Time Application */
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +GAMLogger = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
            } 
            OutputSignals = {
                Counter = {
                    DataSource = Logger
                    Type = uint32
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	}    
       	+Logger = {
            Class = LoggerDataSource
        }  
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = Default
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }        
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer GAMLogger}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }    
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
