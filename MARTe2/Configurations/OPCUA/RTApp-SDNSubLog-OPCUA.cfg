// Real-Time Application: Subscriber Logger with FSM and OPCUA
//
// Alessandro Tenaglia <alessandro.tenaglia42@gmail.com>
//
// April 19, 2022

// Command to execute the RT app:
// sudo ./MARTeApp.sh -l RealTimeLoader -f Configurations/Logger/RTApp-SDNSubLog-OPCUA.cfg -m StateMachine:START

// Command to open OPCUA server:
// ./OPCUA/UaExpert-1.6.0-414-x86_64.AppImage

// Interafces
+OPCUAClient = {
    Class = OPCUAClient::OPCUAClient
    StackSize = 1048576
    CPUs = 0x4
    AutoStart = 1
    Address = "opc.tcp://localhost:4840"
    +PVSubLogStatus = {
        Class = OPCUAInterface::OPCUAVariable
        Path = Systems.SubLog.Status
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
    }
    +PVSubLogCmd = {
        Class = OPCUAClient::OPCUAVariable
        Path = Systems.SubLog.Cmd
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = { { "0" "GOTOIDLE" } { "1" "GOTORUN" } { "2" "GOTOERROR" } {"3" "RESET"} }
        }
    }
}

// State Machine
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = OPCUAClient.PVSubLogStatus
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = RUN
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToRunMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatusPV = {
                Class = Message
                Destination = OPCUAClient.PVSubLogStatus
                Function = OPCUAWrite
                Mode = ExpectsReply
                TimeOut = 0
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        }
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }

        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatusPV = {
                Class = Message
                Destination = OPCUAClient.PVSubLogStatus
                Function = OPCUAWrite
                Mode = ExpectsReply
                TimeOut = 0
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 2
                }
		    }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = RTApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = RTApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}

// RT App
$RTApp = {
    Class = RealTimeApplication
    // GAMs
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    DataSource = Timer
                    Type = uint32
                    Frequency = 1
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMSub = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = SDNSub
                    Type = uint32
                    Frequency = 1
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +GAMLogger = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                CycleTime = {
                    Alias = Run.Thread1_CycleTime
                    DataSource = Timings
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = Logger
                    Type = uint32
                }
                CycleTime = {
                    DataSource = Logger
                    Type = uint32
                }
            }
        }
    }
    // Datasources
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +Logger = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = Default
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +SDNSub = {
            Class = SDN::SDNSubscriber
            ExecutionMode = IndependentThread
            Topic = "pubsub"
            Interface = "eth0"
            Address = "225.168.255.255:1927"
            CPUs = 0x1
            Signals = {
                Counter = {
                    Type = uint32
                }
            }
        }
    }
    // RT App States
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMSub GAMLogger}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
    }
    // Scheduler
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
