/**
 * @file RTApp-OPCUA-Pub.cfg
 * @author Federico Oliva
 * @date 7 February, 2022
 * @brief Configuration file for a MARTe app
 */

/* OPCUA Client */
+OPCUAClient = {
    Class = OPCUAClient::OPCUAClient
    StackSize = 1048576
    CPUs = 0x4
    AutoStart = 1
    Address = "opc.tcp://localhost:4840"
    +PV_STATUS = {
        Class = OPCUAInterface::OPCUAVariable
        Path = SYSTEMS.CLI_01.Status
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
    }
    +PV_DATA = {
        Class = OPCUAInterface::OPCUAVariable
        Path = SYSTEMS.CLI_01.Data
        Type = float32
        NameSpaceIndex = 1
        NumberOfElements = 1
    }
}

/* Real-Time Applcation */
$TestApp = {
    Class = RealTimeApplication
    /* GAMs */
    +Functions = {
        Class = ReferenceContainer
        /* Timer */
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    DataSource = Timer
                    Type = uint32
                    Frequency = 1
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        /* Sin Waveform */
        +GAMWaveSin = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 0.1
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            } 
            OutputSignals = {
                Sin = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        /* Logger */
        +GAMLogger = {
            Class = IOGAM            
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Sin = {
                    DataSource = DDB1
                    Type = float32
                }
            } 
            OutputSignals = {
                Time = {
                    DataSource = Logger
                    Type = uint32
                }
                Sin = {
                    DataSource = Logger
                    Type = float32
                }
            }
        }
        +GAMValue = {
            Class = IOGAM
            InputSignals = {
                Sin = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
            OutputSignals = {
                Node1 = {
                    DataSource = OPCUA
                    Type = float32
                    NumberOfElements = 1
                }
            } 
        }
    }

    /* Datasources */
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }
        +Logger = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = Default
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +OPCUA = {
            Class = OPCUADataSource::OPCUADSOutput
            Address = "opc.tcp://localhost:4840" //The OPCUA Server Address
            Signals = {
                Node1 = {
                    Type = float32
                    NamespaceIndex = 1
                    Path = SYSTEMS.CLI_01.Data
                }
            }
        }

    }
    /* RTApp States */
    +States = {
        Class = ReferenceContainer
        /* Idle */
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
        /* Run */
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer GAMWaveSin GAMValue GAMLogger}
                }
            }
        }
        /* Error */
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }
    }
    /* Scheduler */
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
