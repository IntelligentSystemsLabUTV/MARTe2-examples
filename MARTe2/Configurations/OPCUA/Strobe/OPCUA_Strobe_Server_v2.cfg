/**
 * @file RTApp-OPCUA-Server.cfg
 * @author Alessandro Tenaglia
 * @date 6 February, 2022
 * @brief Configuration file for a MARTe app
 */

+OPCUATypes = {
	Class = ReferenceContainer
	+SYS = {
		Class = IntrospectionStructure
		Data = {
			Type = float32
			NumberOfElements = 1
		}
		Status = {
			Type = uint32
			NumberOfElements = 1
		}
		
	}
	+SYSTEMS = {
		Class = IntrospectionStructure
        MAK1 = {
            Type = SYS
            NumberOfElements = 1
        }
        JORDAN = {
            Type = SYS
            NumberOfElements = 1
        }
	}
}

// OPCUA Server
+OPCUAServer = {
	Class = OPCUA::OPCUAServer
	Port = 4840
	CPUMask = 0x2
	AddressSpace = {
		SYSTEMS = {
			Type = SYSTEMS
		}
	}
}

// OPCUA Client 
+OPCUAClient = {
    Class = OPCUAClient::OPCUAClient
    StackSize = 1048576
    CPUs = 0x4
    AutoStart = 1
    Address = "opc.tcp://localhost:4840"
    +PV_COMMAND = {
        Class = OPCUAClient::OPCUAVariable
        Path = SYSTEMS.JORDAN.Status
        Type = uint32
        NameSpaceIndex = 1
        NumberOfElements = 1
        Event = {
            Destination = StateMachine
            PVValue = Function
            FunctionMap = { { "0" "GOTOIDLE" } { "1" "GOTORUN" } {"2" "RESET"} }
        }
    }
}

/* State Machine */
+StateMachine = {
    Class = StateMachine
    /* INITIAL */
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    /* IDLE */
    +IDLE = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +SetStatus = {
                Class = Message
                Destination = SYSTEMS.JORDAN.Status
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 0
                }
            }
        }
        +GOTORUN = {
            Class = StateMachineEvent
            NextState = RUN
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToRunMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Run
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    /* RUN */
    +RUN = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
		    +SetStatus = {
                Class = Message
                Destination = SYSTEMS.JORDAN.Status
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = 1
                }
            }
        } 
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
        +GOTOERROR = {
            Class = StateMachineEvent
            NextState = ERROR
            NextStateError = ERROR
        }
    }
    /* ERROR */
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
            +SetStatus = {
                Class = Message
                Destination = SYSTEMS.JORDAN.Status
                Function = OPCUAWrite
                Mode = ExpectsReply
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = -1
                }
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = IDLE
            NextStateError = ERROR
            Timeout = 0
            +PrepareChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
}

/* Real-Time Application */
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 1
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }            
            }
        }
        +GAMLogger = {
            Class = IOGAM            
            InputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
            } 
            OutputSignals = {
                Counter = {
                    DataSource = Logger
                    Type = uint32
                }
            }
        }
        +GAMShowOPCUA = {
            Class = IOGAM            
            InputSignals = {
                MAK1Read = {
                    DataSource = DDB1
                    Type = float32
                }
            } 
            OutputSignals = {
                MAK1Read = {
                    DataSource = Logger
                    Type = float32
                }
            }
        }
        +GAMSig = {
            Class = StrobeGAM::StrobeSig
            Val = 0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            } 
            OutputSignals = {
                Sig = {
                    DataSource = DDB1
                    Type = float32
                }
            }
        }
        +GAMSetOPCUA = {
            Class = IOGAM
            InputSignals = {
                Sig = {
                    DataSource = DDB1
                    Type = float32
                }
            }
            OutputSignals = {
                NodeMAK1 = {
                    DataSource = OPCUA_MAK1_OUT
                    Type = float32
                    NumberOfElements = 1
                }
            } 
        } 
        +GAMGetOPCUA = {
            Class = IOGAM
            InputSignals = {
                NodeMAK1 = {
                    DataSource = OPCUA_MAK1_IN
                    Type = float32
                }
            }
            OutputSignals = {
                MAK1Read = {
                    DataSource = DDB1
                    Type = float32
                    NumberOfElements = 1
                }
            } 
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
       	}    
       	+Logger = {
            Class = LoggerDataSource
        }  
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = Default
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +OPCUA_MAK1_OUT = {
            Class = OPCUADataSource::OPCUADSOutput
            Address = "opc.tcp://localhost:4840" //The OPCUA Server Address
            Signals = {
                NodeMAK1 = {
                    Type = float32
                    NamespaceIndex = 1
                    Path = SYSTEMS.MAK1.Status
                }
            }
        }
        +OPCUA_MAK1_IN = {
            Class = OPCUADataSource::OPCUADSInput
            Address = "opc.tcp://localhost:4840" //The OPCUA Server Address
            Signals = {
                NodeMAK1 = {
                    Type = float32
                    NamespaceIndex = 1
                    Path = SYSTEMS.MAK1.Status
                }
            }
        }       
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }        
        +Run = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer GAMGetOPCUA GAMSig GAMSetOPCUA GAMShowOPCUA}
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x8
                    Functions = {GAMTimer}
                }
            }
        }    
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
